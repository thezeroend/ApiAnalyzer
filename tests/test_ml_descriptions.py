#!/usr/bin/env python3
"""
Teste do sistema de ML para gera√ß√£o de descri√ß√µes de anomalias
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import requests
import json
from datetime import datetime, timedelta

def test_description_ml():
    """Testa o sistema de ML de descri√ß√µes"""
    print("ü§ñ Testando sistema de ML de descri√ß√µes...")
    
    base_url = "http://localhost:8000"
    
    # Teste 1: Treinar modelo
    print("\n1Ô∏è‚É£ Treinando modelo de descri√ß√µes...")
    try:
        response = requests.post(f"{base_url}/ml/descriptions/train")
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Modelo treinado com sucesso!")
            print(f"   - Logs utilizados: {result.get('logs_used', 0)}")
            print(f"   - Modelos salvos: {', '.join(result.get('models_saved', []))}")
        else:
            print(f"‚ùå Erro ao treinar modelo: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        return False
    
    # Teste 2: Analisar padr√µes
    print("\n2Ô∏è‚É£ Analisando padr√µes de anomalias...")
    try:
        response = requests.get(f"{base_url}/ml/descriptions/analyze")
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ An√°lise de padr√µes conclu√≠da!")
            print(f"   - Total de anomalias: {result.get('total_anomalies', 0)}")
            print(f"   - Tipos detectados: {', '.join(result.get('summary', {}).get('types_detected', []))}")
            print(f"   - Tipo mais comum: {result.get('summary', {}).get('most_common_type', 'N/A')}")
            
            # Exibe detalhes dos padr√µes
            pattern_analysis = result.get('pattern_analysis', {})
            for anomaly_type, analysis in pattern_analysis.items():
                print(f"   üìä {anomaly_type.upper()}:")
                print(f"      - Quantidade: {analysis.get('count', 0)}")
                print(f"      - Percentual: {analysis.get('percentage', 0):.1f}%")
                print(f"      - Score m√©dio: {analysis.get('avg_score', 0):.3f}")
        else:
            print(f"‚ùå Erro na an√°lise: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        return False
    
    # Teste 3: Gerar descri√ß√£o personalizada
    print("\n3Ô∏è‚É£ Gerando descri√ß√£o personalizada...")
    try:
        test_log = {
            "requestId": "test_req_001",
            "clientId": "suspicious_client",
            "ip": "203.0.113.45",
            "apiId": "api_admin",
            "method": "POST",
            "path": "/api/admin/users",
            "status": 403,
            "score": 0.85,
            "timestamp": datetime.now().isoformat()
        }
        
        response = requests.post(f"{base_url}/ml/descriptions/generate", json=test_log)
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Descri√ß√£o gerada com sucesso!")
            print(f"   üìù Descri√ß√£o: {result.get('description', 'N/A')}")
            print(f"   üîç Tipo: {result.get('analysis', {}).get('anomaly_type', 'N/A')}")
            print(f"   ‚ö†Ô∏è Severidade: {result.get('analysis', {}).get('severity', 'N/A')}")
        else:
            print(f"‚ùå Erro na gera√ß√£o: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        return False
    
    # Teste 4: Testar diferentes cen√°rios
    print("\n4Ô∏è‚É£ Testando diferentes cen√°rios...")
    test_scenarios = [
        {
            "name": "Ataque de For√ßa Bruta",
            "data": {
                "requestId": "brute_force_001",
                "clientId": "unknown_client",
                "ip": "192.168.1.100",
                "apiId": "api_auth",
                "method": "POST",
                "path": "/api/auth/login",
                "status": 401,
                "score": 0.92,
                "timestamp": datetime.now().isoformat()
            }
        },
        {
            "name": "Erro de Servidor",
            "data": {
                "requestId": "server_error_001",
                "clientId": "normal_client",
                "ip": "10.0.0.50",
                "apiId": "api_users",
                "method": "GET",
                "path": "/api/users",
                "status": 500,
                "score": 0.78,
                "timestamp": datetime.now().isoformat()
            }
        },
        {
            "name": "Acesso Administrativo",
            "data": {
                "requestId": "admin_access_001",
                "clientId": "regular_user",
                "ip": "172.16.0.25",
                "apiId": "api_admin",
                "method": "GET",
                "path": "/api/admin/system",
                "status": 403,
                "score": 0.88,
                "timestamp": datetime.now().isoformat()
            }
        }
    ]
    
    for scenario in test_scenarios:
        try:
            response = requests.post(f"{base_url}/ml/descriptions/generate", json=scenario["data"])
            if response.status_code == 200:
                result = response.json()
                print(f"   ‚úÖ {scenario['name']}:")
                print(f"      - Descri√ß√£o: {result.get('description', 'N/A')[:80]}...")
                print(f"      - Tipo: {result.get('analysis', {}).get('anomaly_type', 'N/A')}")
                print(f"      - Severidade: {result.get('analysis', {}).get('severity', 'N/A')}")
            else:
                print(f"   ‚ùå {scenario['name']}: Erro na gera√ß√£o")
        except Exception as e:
            print(f"   ‚ùå {scenario['name']}: Erro de conex√£o - {e}")
    
    print("\nüéâ Teste do sistema de ML de descri√ß√µes conclu√≠do!")
    return True

def test_detection_with_ml_descriptions():
    """Testa a detec√ß√£o de anomalias com descri√ß√µes ML"""
    print("\nüîç Testando detec√ß√£o com descri√ß√µes ML...")
    
    base_url = "http://localhost:8000"
    
    try:
        # Detecta anomalias
        response = requests.get(f"{base_url}/ml/detect")
        if response.status_code == 200:
            result = response.json()
            
            if "error" in result:
                print(f"‚ùå Erro na detec√ß√£o: {result['error']}")
                return False
            
            anomalies = result.get("anomalies", [])
            print(f"‚úÖ {len(anomalies)} anomalias detectadas")
            
            # Exibe algumas descri√ß√µes geradas
            for i, anomaly in enumerate(anomalies[:3]):  # Mostra apenas as 3 primeiras
                description = anomaly.get("anomaly_description", "Sem descri√ß√£o")
                score = anomaly.get("anomaly_score", 0)
                print(f"   üìù Anomalia {i+1}:")
                print(f"      - Score: {score:.3f}")
                print(f"      - Descri√ß√£o: {description}")
                print()
            
            return True
        else:
            print(f"‚ùå Erro na detec√ß√£o: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Iniciando testes do sistema de ML de descri√ß√µes...")
    
    # Testa o sistema de ML de descri√ß√µes
    success1 = test_description_ml()
    
    # Testa a detec√ß√£o com descri√ß√µes ML
    success2 = test_detection_with_ml_descriptions()
    
    if success1 and success2:
        print("\n‚úÖ Todos os testes passaram!")
        sys.exit(0)
    else:
        print("\n‚ùå Alguns testes falharam!")
        sys.exit(1) 